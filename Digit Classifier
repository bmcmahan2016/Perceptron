 # -*- coding: utf-8 -*-
"""
Created on Thu Mar 2 18:55:37 2017

@author: Brandon McMahan
Perceptron Digit Classifier 
will use the pocket algorithm 
"""

#load the MNIST data
#mnist.train 55,000 training data points
#mnist.test 10,000 points of testing data
#mnist.validate 5,000 points of validation data
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

#import desired packages
import numpy as np


#create perceptron class
class Perceptron(object):
    #construct a perceptron object
    def __init__(self,noInputs, noExamples):
        self.y = np.zeros(noExamples)
        self.w = np.zeros(noInputs+1)
    
    def target_fcn(self,digit,labels):
        for i in range(len(labels)):
            if labels[i][digit] == 1:
                self.y[i] = +1
            else:
                self.y[i] = -1
    
    def learn(self,x):
        for n in range(len(self.y)):
            if self.y[n]!=np.sign(np.dot(self.w,x[n][0:785])):
                self.w = self.w + self.y[n]*x[n][0:785]
            else:
                self.w = self.w
        
    #method to compute the current in sample error for perceptron
    def error_fcn(self,x):
        network = np.sign(np.dot(x,self.w))
        error = 0.0 #initialize error as a flaoting point
        for i in range(len(network)):
            if network[i]==self.y[i]:
                error = error + 0.0
            else:
                error = error + 1.0
        #normalize error
        error = error/len(network)
        return error
#end creation of perceptron class


N = 10000;   #generate N training data points
x = np.zeros((N,785))     #initialize training data examples
y = np.zeros((N,10))         #this will label the data
for n in range(0,N):
    x[n][0] = 1                             #we need this as a threshold for PLA
    x_,y_ = mnist.train.next_batch(1)
    x[n][1:785] = x_                        #this is the data for each image
    y[n] = y_
#end generation of training data points

#PERCEPTRON 1
p1 = Perceptron(784,N)
p1.target_fcn(1,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p1.learn(x)
    error = p1.error_fcn(x)
    print "Perceptron 1 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 1" %counts
#END PERCEPTRON 1

#PERCEPTRON 2
p2 = Perceptron(784,N)
p2.target_fcn(2,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p2.learn(x)
    error = p2.error_fcn(x)
    print "Perceptron 2 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 2" %counts
#END PERCEPTRON 2

#PERCEPTRON 3
p3 = Perceptron(784,N)
p3.target_fcn(3,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p3.learn(x)
    error = p3.error_fcn(x)
    print "Perceptron 3 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 3" %counts
#END PERCEPTRON 3

#PERCEPTRON 4
p4 = Perceptron(784,N)
p4.target_fcn(4,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p4.learn(x)
    error = p4.error_fcn(x)
    print "Perceptron 4 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 4" %counts
#END PERCEPTRON 4

#PERCEPTRON 5
p5 = Perceptron(784,N)
p5.target_fcn(5,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p5.learn(x)
    error = p5.error_fcn(x)
    print "Perceptron 5 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 5" %counts
#END PERCEPTRON 5

#PERCEPTRON 6
p6 = Perceptron(784,N)
p6.target_fcn(6,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p6.learn(x)
    error = p6.error_fcn(x)
    print "Perceptron 6 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 6" %counts
#END PERCEPTRON 6

#PERCEPTRON 7
p7 = Perceptron(784,N)
p7.target_fcn(7,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p7.learn(x)
    error = p7.error_fcn(x)
    print "Perceptron 7 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 7" %counts
#END PERCEPTRON 7

#PERCEPTRON 8
p8 = Perceptron(784,N)
p8.target_fcn(8,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p8.learn(x)
    error = p8.error_fcn(x)
    print "Perceptron 8 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 8" %counts
#END PERCEPTRON 8

#PERCEPTRON 9
p9 = Perceptron(784,N)
p9.target_fcn(9,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p9.learn(x)
    error = p9.error_fcn(x)
    print "Perceptron 9 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 9" %counts
#END PERCEPTRON 9

#PERCEPTRON 0
p0 = Perceptron(784,N)
p0.target_fcn(0,y)
counts = 0
#loop over iterations to get hypothesis set to converge
error = 10
while (error > 0.05):
    p0.learn(x)
    error = p0.error_fcn(x)
    print "Perceptron 10 in sample error: %.4f%%" %(100.0*error)
    counts = counts + 1
print "%.2d iterations required for convergence of perceptron 10" %counts
#END PERCEPTRON 6
