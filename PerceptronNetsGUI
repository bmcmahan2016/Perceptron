#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  3 23:32:39 2017

@author: Brandon McMahan

Description
Software package that will allow the user to design and train a single layer 
neural network where each neuron is a Perceptron
"""
#import desired packages
import numpy as np
import Tkinter
import tkMessageBox
import pnetwork as pn
from pguifcns import *

#!/usr/bin/python


#theme color for NerveNets in hex
color2 = '#390f8c'        #rich purple
color1 = '#cce0ff'        #sky blue
color3 = ''
color4 = ''
color5 = ''


window1 = Tkinter.Tk()
window1.title('PerceptionNets--Initalize Network Part 1')
window1.configure(bg=color1)
window1.minsize(width=600,height=400)
window1.attributes("-topmost",True)

text = Tkinter.Text(window1,width=80,height=8,bg = color1, highlightbackground = color1)
text.insert(Tkinter.INSERT, "Hello! Welcome to PerceptionNets. \n\nPerception nets will \
allow you to create a single layer Perceptron network that may be used \
for classification problems with linearly seperable data. To begin please \
enter the number of perceptrons your classification problem will require. \
If you would like to run a tutorial and learn more about how PerceptionNets \
works please click the Tutorial button below. Otherwise select Submit once \
you have specified the number of Perceptrons.")

text1 = Tkinter.Text(window1,width=60,height=1,bg = color1, highlightbackground = color1)
text1.insert(Tkinter.INSERT, "Or, you may also load a previously constructed network: ")

prompt1 = Tkinter.Label(window1,text="Please enter the number of neurons you want: ",bg = color1, highlightbackground = color1)
prompt2 = Tkinter.Label(window1,text="Please enter the size of training data: ",bg = color1, highlightbackground = color1)

prompt1.place(x=20, y = 150)
prompt2.place(x=20, y = 200)
text.place(x=0,y=0)
text1.place(x=0,y=350)
form1 = Tkinter.Entry(window1,bd=1,width=3,bg=color1,highlightbackground = color1)
form2 = Tkinter.Entry(window1,bd=1,width=9,bg=color1,highlightbackground = color1)
form1.place(x=350,y=150)
form2.place(x=325,y = 200)

def TutorialCallback():
    tutorial_info = "Welcome to the PerceptronNets Tutorial! \n\n\nPerceptron Nets \
creates single layer neural networks where each neuron is modeled by a perceptron. \
These neural networks are ideal for classifying data that is linearly seperable. \
A single perceptron recieves input data and outputs a binary +/-. This means that \
a single perceptron is able to classify an input dataset as True or False. It works \
by taking a weighted sum of the input datapoints and then comparing that sum to a \
threshold. If the sume exceeds the threshold vaue then + is returned, otherwise - \
is returned."
    tkMessageBox.showinfo( "PerceptronNets Tutorial", tutorial_info)
    
    

#this executes after user has entered size of each layer and closes window2    
def CreateNetworkCallback():
    #get the number of neurons we need to put in each layer
    noNeurons = form1.get()      #this is the desired number of layers entered by the user
    noInputs = form2.get()
    noNeurons = int(noNeurons)
    noInputs = int(noInputs)
    window3 = Tkinter.Tk()
    window3.title('PerceptionNets--Artificial Neural Network')
    window3.configure(bg=color1)
    window3.attributes("-topmost",True)
    window3.minsize(width=700,height=550)
    window1.destroy()
    
    
    C = Tkinter.Canvas(window3, bg=color2,highlightbackground=color1, height=450, width=200)
    dx = 800/noNeurons #partition screen
    dy = 400/noNeurons
    neurons = []
    for i in range(noNeurons):
        neurons.append(C.create_oval(75, 50+dy*i, 75+0.25*dx, 50+dy*i+dy*0.5,fill="purple",outline="purple"))
    #now unpack the canvas
    C.place(x=50,y=50)
    #label the figure
    L1 = Tkinter.Label(window3,text="Neural Network Schematic",bg = color1, highlightbackground = color1, width=15)
    L2 = Tkinter.Label(window3,text="Network Options",bg = color1, highlightbackground = color1, width = 50)
    L1.place(x=20,y=20)
    L2.place(x=150,y=20)
    
    #create buttons under network options
    B1 = Tkinter.Button(window3,text="Load Training Data",command= getPath,bg = color1, highlightbackground = color1)
    B2 = Tkinter.Button(window3,text="Training Data Help",command=TutorialCallback,bg = color1, highlightbackground = color1)
    B3 = Tkinter.Button(window3,text="Train Network",command=lambda: TrainNetwork(noNeurons,noInputs,noExamples),bg = color1, highlightbackground = color1)
    B4 = Tkinter.Button(window3,text="Train Network Help",command=TutorialCallback,bg = color1, highlightbackground = color1)
    B5 = Tkinter.Button(window3,text="Load Data For Classification",command=TutorialCallback,bg = color1, highlightbackground = color1)
    B6 = Tkinter.Button(window3,text="Save Network",command=TutorialCallback,bg = color1, highlightbackground = color1)
    B1.place(x=300,y=100)
    B2.place(x=450,y=100)
    B3.place(x=300,y=200)
    B4.place(x=450,y=200)
    B5.place(x=300,y=500)
    B6.place(x=550,y=500)
    window3.mainloop()
        

B1 = Tkinter.Button(window1,text="Create Network",command=CreateNetworkCallback,bg=color1,highlightbackground = color1)
B2 = Tkinter.Button(window1,text="Tutorial",command=TutorialCallback, bg=color1,highlightbackground = color1)
B1.place(x = 300,y = 250)
B2.place(x=100, y=250)
B3 = Tkinter.Button(window1,text="Load Saved Network",command=TutorialCallback, bg=color1,highlightbackground = color1)
B3.place(x = 425,y = 350)
window1.mainloop()
